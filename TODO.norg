* Now
  - (x) Call service function to node
  - (x) Get assemblyscript example working?
  - (x) Cross-service communication
  - (x) Create test examples
  - (x) stop listening to messages after module ends
  - (x) Lib: assemblyscript
  - ( ) Lib: rust (utils)
  - (x) Tests
  - ( ) Network layer
  - ( ) Share pointer offset with module?

* Next
  - ( ) Zig | CPython | Haskell example
  - ( ) Allow http calls from modules
  - ( ) Lib: C
  - ( ) Lib: rust (proc macro)
  - ( ) Benchmarking
  - ( ) :[file-for-io]{_}: Data in/out from file/named pipe instead?
  - ( ) error handling

* Later
  - ( ) milliservice.yaml
  - ( ) Epoch based execution timeout
  - ( ) Environment labels - production/development
  - ( ) Streaming request and response (solved if using [file-for-io])
  - ( ) Versioning
  - ( ) Forward env variables
  - ( ) Scoped fs access
  - (x) Multiple request handlers (use `on_request` by default) (same module)
  - ( ) Multiple core instances or namespacing (for scoping)
  - ( ) Multithreading
  - ( ) Configurable memory per module?
  - ( ) Security: enable capabilities per module (network, file, env vars, invoke other services, etc)
  - ( ) Security: Overflow checks for data size
  - ( ) Security: pointer increment should be cyclic?

* Language
  - (x) Rust
  - ( ) Zig
  - ( ) AssemblyScript
  - ( ) JS (Javy)?
  - ( ) CPython | RustPython
  - ( ) C/C++
  - ( ) Haskell
  - ( ) Go
  - ( ) Ocaml
  - ( ) C#
  - ( ) F#
  - ( ) Crystal
  - ( ) Elixir
  - ( ) Faust
  - ( ) Java
  - ( ) Kotlin
  - ( ) Lua
  - ( ) Nim
  - ( ) Ruby

* Maybe
  - ( ) Non-wasm runtime for js via deno_core?
  - ( ) Wasm builder for ts with WIT + deno_core | ts-morph + deno_core?
  - ( ) Preloaded dynamically linked modules (to reduce wasm bundle size)?
  - ( ) Keep an eye on wasm component model?

* Shitpile
  - (_) Wrapper for JS (javy js lib)

* Links
  - {https://cryptii.com/pipes/integer-converter}
  - {https://wasix.org/docs}
  - {https://docs.wasmtime.dev/examples-rust-memory.html}
  - {https://docs.rs/wasmtime/12.0.1/wasmtime/struct.Memory.html#method.data}
  - {https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/index.html}
  - {https://github.com/pmalmgren/wasi-data-sharing/blob/shared-linear-memory-demo/examples/wasi/main.rs}
  - {https://www.fermyon.com/}
  - {https://wasmer.io/}
  - JS: {https://github.com/bytecodealliance/javy}
  - Go: {https://github.com/stealthrocket/wasi-go}
  - Ocaml: {https://github.com/ocsigen/js_of_ocaml}
  - Cpython: {https://github.com/python/cpython/blob/main/Tools/wasm/README.md}
  - Haskell: {https://gitlab.haskell.org/ghc/ghc-wasm-meta}
  - Java: {https://github.com/fermyon/teavm-wasi}
  - Lisp (wasCm) {https://github.com/FemtoEmacs/wasCm}
  - Crystal {https://forum.crystal-lang.org/t/trying-out-wasm-support/4508}
  - Network adapter {https://github.com/hyperium/hyper/blob/master/examples/service_struct_impl.rs}
  - Network adapter alt {https://github.com/graphul-rs/graphul#-context}

* Pros
** vs monolith
   - Ease of deployment (faster shipping)
   - Programming language and technology agnostic
   - Easy versioning
   - Deployment has 0 downtime without scaling
   - Clear boundaries of ownership of services in teams
   - Security: Sandboxed environment for modules
** vs microservices
   - Easy versioning
   - Simple service discoverability
   - Non-flat architecture, can be scoped
   - You own the server
   - Lower up-front costs (dedicated instance)
   - Easy integration testing
   - Lower complexity
   - No network hop for cross-service communication

* Cons
** vs monolith
   - build system for each module
** vs microservices
   - no fault isolation
   - not independently scalable

